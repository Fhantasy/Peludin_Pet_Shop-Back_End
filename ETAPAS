1 - Instalar as bibliotecas nessessarias:
Produção
express - Para criar o servidor
express - formidable - Para usar forms no AdminJS
adminjs - Para criar a interface de Admin
@adminjs/express - Para indicar qual o framework do servidor vamos trabalhar no AdminJS
@adminjs/sequelize - Para indicar qual o framework ORM (conexão com banco de dados) vamos trabalhar no AdminJS
@adminjs/upload - Para trabalhar com uploads no AdminJS
pg - Pra se conectar com o banco de dados PostGress
sequelize - ORM para conexão com o banco de dados

Desenvolvimento
typescript - Para usar o typecript
ts-node-dev - Para rodar a aplicação em desenvolvimento
sequelize-cli - Para criar migrations e bancos de dados no console
@types/express - Para ter a tipagem no express
@types/node - Para ter a tipagem no node

2 - Git
Criar um arquivo .gitignore para ignorar os arquivos no repositório git, colocar a pasta node_modules para ser
ignorada. Dar um git init para iniciar o repositório git.

3 - Server
Criar a pasta 'src' e dentro o 'server.ts'. No server fazer i import do express e atribui-lo a 'const app',
depois dar um 'app.listen(PORT)' (PORT vem de process.env.PORT). Criar o script "dev": "ts-node-dev --transpile-only 
--ignore-watch node_modules src/server.ts" para rodar o ts-node-dev. E dar um 'npx tsc --init' para adicionar o
arquivo de configurações do typescript.

4 - Conexão com o banco de dados
Criar uma pasta 'config' e dentro um arquivo 'sequelizeCli.js' para configurar a conexão com o banco de dados posrtgres.
No arquivo vai o export de um objeto com outro objeto 'development' contendo as informações do banco de dados a ser acessado.
Depois tem que ir no shell do postgres e dar um 'CREATE USER peludin WITH CREATEDB ENCRYPTED PASSWORD 'peludin';' para criar
esse usuario informado no 'sequelizeCli.js'.Após isso na linha de comando digitar 'npx sequelize-cli db:create' para criar
o banco de dados especificado. Criar um arquivo de configuração do sequelize na raiz chamado .sequelizerc e lá exportar um 
objeto informando o caminho para as pastas 'config', 'models', 'migrations' e 'seeders'. Criar a pasta 'models' e 'database' em 'src' e na pasta database criar as pastas 'migrations' e 'seeders' e o arquivo index.ts aonde vai se importar o sequelize
e criar uma variavel dele com suas configurações de conexão com o banco de dados. No sever dentro de 'app.listen' é colocado
um teste de conexão com o banco de dados.

5 - Configuração do AdiminJS
Crie a pasta “adminjs” dentro de “src” e o arquivo index.ts dentro dela contendo o registro do adapter do sequelize, a 
instancia do AdminJS com suas configurações e a criação de um router a partir de uma instância da classe AdminJs. Criar a 
pasta 'public' e dentro 'images' e dentro colocar a imagem do logo depois ir no server e adicionar 'public' como a pasta 
de arquivos estaticos 'app.use(express.static('public'))'

6 - Primeiro model e adição ao AdminJS
Criar uma migration com "npx sequelize-cli migration:generate --name create-categories-table" adicionar as informações a serem
criadas na tabela e rodar a migration com "npx sequelize-cli db:migrate". Agora criar na pasta models o arquivo "Category.ts"
aonde vai ser criado o model do sequelize para a interação entre a aplicação e o banco de dados, na pasta models ainda criar
um index.ts para compartilhar todos os models. Agora na pasta adminJs criar uma pasta resources e dentro dela um arquivo 
category.ts aonde vão ficar as opções a serem exibidas para category la no AdminJS, ainda em resources criar um index.ts 
para exportar um arquivo com todos os resources e suas associações com os models e por fim no index.ts em adminJs colocar a
opção resources como o arquivo de todas as associações feito anteriormente.

7 - Criando as demais tabelas
Criar as outras tabelas e como anteriormente configurar no AdminJS. No resource de product exportar outra opção chamada 
productResourceFeatures onde vai ter as opções de upload do AdiminJS e dentro de uploadFileFeature passar essas opções.

8 - Criptografando a senha
Dar um "npm i bcrypt" para isntalar a ferramenta de criptografar. La em "models" "User.ts" colocar um terceiro parametro no
"define" sendo "hooks" e nele definir um "beforeSave" que vai ser executado antes do model ser salvo no banco de dados, passando
o user e verificando se é uma nova instancia ou está sendo alterada, então usando o bcrypt para criptografar a senha antes de
ir para o banco de dados.

9 - Fazendo login de Administrador
La no index do AdiminJS podemos agora trocar o "buildRouter" po "buildAuthenticatedRouter" aonde colocaremos a instancia de
AdiminJS e como opções "authenticate" que vai gerar o login, em uma função com parametros de "email" e "password" pegamos o 
email e tentamos encontrar no banco de dados um usuario que bate, se tiver e se a "role" for "admin" então compara-se 
as senhas usando o bcrypt.compare e por fim retorna o "user". O "coockiePassword"  é colocado um qualquer e tambem algumas 
outra opções padrão.

10 - Tradução do AdminJS
criar um arquivo"locale.ts" na pasta "adminJs" e la exportar um objeto do tipo Locale com as configurações de tradução,
depois no "index.ts" nas opções do AdminJS adicionar um "locale" sendo o arquivo de configurações exportado.

11 - Modificando o Dashboard do AdiminJS
La no "index.ts" da pasta "adminJs" coloca-se mais uma opção "dashboard" onde se especifica o "component" a ser usado e o 
"handler" que é uma função para passar informações da api para a pagina do dashboard. Ai em "adminJs" cria-se outra pasta
"components" onde vai o arquivo "Dashboard.tsx" e nele fazemos uma pagina react (colocando em tsconfig.json a opção de jsx como
react) pegando as informações da api com o "ApiClient" do AdiminJS e pegando a função de "handler" com "api.getDashboard()", 
também pegamos o "admin" atual com const "[currentAdmin] = useCurrentAdmin()" e fazemos a pagina. Nota - na hora do "map" 
se pega o "resource" usando "Object.entries(resource)" que transforma um objeto em um array com a chave e o valor em cada index
ex ["Produtos", 2]

12 - Arrumando as opções do AdminJS
Para fechar a parte do AdiminJS pegas-se as opções "dashboard", "branding", e as opções de autenticação e coloca em novos arquivos
só utilizando então o importe nas opções em "index.ts". Nota - Para o export dos arquivos de configuração em "branding.ts"
o objeto exportado é do tipo "BrandingOptions", em authenticate é do tipo "AuthenticationOptions" e em dashboard foi especificado
a tipagem com um "component" do tipo "string" e um handler do tipo "PageHandler". Foi atualizado o metodo de pegar o component
criando um arquivo "index" em "components" e exportando um objeto com uma variavel do tipo "Component Loader" que pega o 
component criado em "Dashboard", la em "dashboard" é adicionado então o component como "Component.Dashboard" e la em "index" 
das opções do AdiminJS tem que ser adicionado nas opções a instancia de "componentLoader". 

13 - Criando as rotas de Category
Criar uma pasta dentro de "src" chamada "controllers" aonde criamos um arquivo "categoryController" e nele exportamos um objeto
com os handlers para as rotas. No objeto categoryController temos as funções "index" para pegar todas as categorias dando um 
"Category.findAll", e a função "show" onde mostramos os cursos paginados de uma determinada categoria. Em "src" criamos um
"routes.ts" aonde chamamos o Router do express e colocamos as rotas de category com os handlers de "categoryController".
Para criar o handler "show" criamos uma pasta "services" em "src" aonde colocamos o arquivo "categoryService", nele exportamos
uma função para pegar os cursos associados a categoria e retornarmos só aqueles de acordo com a pagina e o numero por pagina.
Também em "src" criamos uma pasta "helpers" e nela o arquivo "productsPagination" aonde exportamos uma função para pegar o page 
e o perPage da query e tranforma-los em numeros. Por fim em "server" adicionamos o "router" criado.

14 - Criando as rotas de Product
Criando em "controllers" um controller para os "products" e um service "productService" criamos as rotas "index", "show", "search",
"featured" e "onSale", algumas com paginação usando o service e o helper "productPagination".

15 - Criando as rotas de User
No "service" criamos um "userService" aonde colocamos os metodos para verificar se o email ja existe, e para criar um novo
usuário. Criamos um "authController" aonde fazamos o metodo register que verifica o email e registra o usuário.